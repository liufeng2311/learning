未解决问题：
1.使用原生sql查询时，如何将查询结果直接映射到自定义好的实体类中？



Springboot+jpa的使用
1.引入JPA的jar包和数据库的jar包
	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<scope>runtime</scope>
	</dependency>

	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-data-jpa</artifactId>
	</dependency>
2.配置数据库连接信息和jpa信息
	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8
	spring.datasource.username=root
	spring.datasource.password=root

	spring.jpa.hibernate.ddl-auto=update      表示只有在被@Entity修饰的类发生变化时，添加对应的字段，不影响元数据，只能添加字段，不会删除数据库对应的字段
	spring.jpa.show-sql=true                  表示显示sql语句
	spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialec      表示使用InnoDB引擎
3.编写需要进行建表的实体类(主键ID如果为自增，需要设置为Integer)
	编写一个存放公共字段的基类，并使用@MappedSuperclass标签修饰类，以保证子类生成的表包含基类的字段
	编写对应数据库表的实体类，并用@Entity标签修饰类，该标签修饰的类都会在数据库中生成对应的表，必须包含主键ID
	我们可以自定义生成的表名和字段属性:
	@Transient修饰字段，表示该字段不映射到数据库
	@Table(name="user")通过该属性设置该实体类对应的表名称
    @org.hibernate.annotations.Table(appliesTo = "user",comment="用户注册表")通过该标签生成表注释，appliesTo跟表名称，comment跟注释
	@Column(columnDefinition="varchar(50) comment '创建人'")通过该标签来为每个字段添加注释
	@CreatedDate        添加数据时自动生成当前时间
	@LastModifiedDate   修改数据时自动更新时间
4.编写用于实体类操作的JPA接口
	编写自定义接口并实现JpaRepository<T, ID>接口，T表示你要操作的实体类表，ID表示该表的ID类型，例如：
	public interface UserRepository extends JpaRepository<User, Integer>{}
	上述接口表示我们可以使用JPA提供的默认方法对User对应的表进行操作
5.多模块项目JPA实体类和仓库接口扫描问题：
	在maven多模块项目中，JPA的jar包引用必须在父模块中，要保证启动类和实体类模块都能加载到该jar包
	子模块中jpa实体类的注解不会被主模块扫描到，我们需要手动指定实体类所在的包@EntityScan(basePackages ="com.domain")
	子模块中jpa仓库接口的位置会被扫描到(子模块和主模块包结构相同)，如何包结构不同，需要手动指定仓库接口位置@EnableJpaRepositories(basePackages="com.domain")
6.maven多模块项目子模块注解扫描不到问题：
	SpringBoot默认会扫描启动类所在的包以及它的子包，单模块项目只需将启动类放在最顶层包便可
	如果是多模块项目，我们可以将所有模块的包名统一化，使启动类位于最顶层包，即使这样有些子模块jar中注解也不会被扫描到，需要使用特定的注解指定，比如：@EntityScan(basePackages ="com.domain")
	如果多模块中项目中各个模块的包名不同，我们也可以分别指定他们的扫描路径：
	在启动类上添加该标签指定@ComponentScan(basePackages= {"com.project","com.common","com.domain"})
	也可以直接在@SpringBootApplication标签后注定：@SpringBootApplication(scanBasePackages= {"com.project","com.common","com.domain"})，因为@SpringBootApplication包括@ComponentScan标签
7.JpaRepository<T, ID>接口进行多表查询结果映射(HQL)
	新建一个实体类作为多表查询返回结果的接收类，并添加所有属性的构造函数，因为@Data只为我们提供了空的构造函数
	在HQL中利用该类来构建结果集，new 类的完全限定名(属性)，这里的类名必须包含包名，否则找不到
	@Query("select new com.domain.base.dto.UserInfoDTO(u.loginName,u.password,u.mobilePhone,u.isRealName,a.sex,a.address,a.idCard) from User u,UserBaseInfo a where u.id=a.userId")
	List<UserInfoDTO> getUserInfo();
8.JpaRepository<T, ID>接口进行单表结果映射(SQL)
	只用原生SQL时，只能查询单表T的结果集，即查询的表只能是T表，比如使用原生sql，只能查询User表
	public interface UserRepository extends JpaRepository<User, Integer>{
		@Query(value="select *  from user u  where u.id=a.user_id",nativeQuery=true)
	    List<User> getUserInfo();
	}
9.JpaRepository自定义方法如果涉及更新和删除，要使用如下标签
	@Transactional  表示失败时回滚
	@Modifying      表示这是更新或删除操作
10.JPA分页排序查询,JPA提供了非常简单的排序和分页实现
	Sort sort = new Sort(Direction.ASC, "id");       我们可以通过Sort规定排序字段和排序类型，并作为参数传入Pageable类   
	Pageable Pageable =new PageRequest(1,10,sort)    我们可以通过Pageable规定分页，表示第几页，每页多少条数据
	然后作为方法的最后一个参数传入即可，比如
	@Query("update User u set u.loginName = ?1 where u.id= ?2")
	int updateNameById(String name,Integer Id,Pageable pageable);
11.JPA条件查询,Example类，比如查找名字等于陈韵欣的数据：
	UserInfo userInfo1 = new UserInfo();
	userInfo1.setName("陈韵欣");
	Example<UserInfo> example =Example.of(userInfo1);
	userInfoRepository.findAll(example);
12.JPA自定义函数HQL传参
	使用?1表示第一个参数，?2表示第二个参数，以此类推：
	@Query("select t from UserInfo t where t.age=?1 and t.name=?2")
	List<UserInfo> getwang(Integer age,String name);
	指定:属性名来表示@param("属性名")所代表的参数
	@Query("select t from UserInfo t where t.age=:myAge and t.name=:myName")      // :myAge表示@parm("myAge")对应的参数,不用管参数顺序
	List<UserInfo> getliu(@Param("myAge")Integer age,@Param("myName")String name);
	模糊查询时，可以在传参时直接传入%参数%，也可以在HQL中指定：
	@Query("select t from UserInfo t where t.age=:myAge and t.name like %:myName%")      // 模糊查询时，可以直接在占位符(以上两种)上直接加%%，以可以在调用的参数上添加%参数%,模糊查询的字段必须用like
	List<UserInfo> getliuLike(@Param("myAge")Integer age,@Param("myName")String name);
13.JpaRepository接口自定义方法解析，会查询表中的所有字段
	此类方法不需要@Query来定义查询语句，而是根据名字自动解析
	比如以find、read、get、query表示查询
	      count表示统计
		  delete表示删除
		  update表示更新
	 By后表示的是条件，与参数的顺序一一对应
	 比如：
	 findNameAndAgeByAge(String name)    根据name查询出姓名和年龄
	 常见关键词如下：
	And	                 findByLastnameAndFirstname	                     … where x.lastname = ?1 and x.firstname = ?2
	Or	                 findByLastnameOrFirstname	                     … where x.lastname = ?1 or x.firstname = ?2
	Is,Equals	         findByFirstnameIs,findByFirstnameEquals	     … where x.firstname = ?1
	Between	             findByStartDateBetween	                         … where x.startDate between ?1 and ?2
	LessThan	         findByAgeLessThan	                             … where x.age < ?1
	LessThanEqual	     findByAgeLessThanEqual                	         … where x.age ⇐ ?1
	GreaterThan	         findByAgeGreaterThan	                         … where x.age > ?1
	GreaterThanEqual	 findByAgeGreaterThanEqual	                     … where x.age >= ?1
	After	             findByStartDateAfter	                         … where x.startDate > ?1
	Before	             findByStartDateBefore	                         … where x.startDate < ?1
	IsNull	             findByAgeIsNull	                             … where x.age is null
	IsNotNull,NotNull	 findByAge(Is)NotNull	                         … where x.age not null
	Like	             findByFirstnameLike	                         … where x.firstname like ?1
	NotLike	             findByFirstnameNotLike	                         … where x.firstname not like ?1
	StartingWith	     findByFirstnameStartingWith	                 … where x.firstname like ?1 (parameter bound with appended %)
	EndingWith	         findByFirstnameEndingWith	                     … where x.firstname like ?1 (parameter bound with prepended %)
	Containing	         findByFirstnameContaining	                     … where x.firstname like ?1 (parameter bound wrapped in %)
	OrderBy	             findByAgeOrderByLastnameDesc	                 … where x.age = ?1 order by x.lastname desc
	Not	                 findByLastnameNot	                             … where x.lastname <> ?1
	In	                 findByAgeIn(Collection ages)	                 … where x.age in ?1
	NotIn	             findByAgeNotIn(Collection age)	                 … where x.age not in ?1
	TRUE	             findByActiveTrue()	                             … where x.active = true
	FALSE	             findByActiveFalse()	                         … where x.active = false
	IgnoreCase	         findByFirstnameIgnoreCase	                     … where UPPER(x.firstame) = UPPER(?1)